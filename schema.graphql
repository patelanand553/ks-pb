"""
 A keystone list
"""
type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  problems(
    where: ProblemWhereInput! = {}
    search: String
    sortBy: [SortProblemsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ProblemOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Problem!]
  _problemsMeta(
    where: ProblemWhereInput! = {}
    search: String
    sortBy: [SortProblemsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ProblemOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use problemsCount instead."
    )
  problemsCount(where: ProblemWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

type _QueryMeta {
  count: Int
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  email: String
  email_not: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  email_i: String
  email_not_i: String
  email_contains_i: String
  email_not_contains_i: String
  email_starts_with_i: String
  email_not_starts_with_i: String
  email_ends_with_i: String
  email_not_ends_with_i: String
  email_in: [String]
  email_not_in: [String]
  password_is_set: Boolean

  """
   condition must be true for all nodes
  """
  problems_every: ProblemWhereInput

  """
   condition must be true for at least 1 node
  """
  problems_some: ProblemWhereInput

  """
   condition must be false for all nodes
  """
  problems_none: ProblemWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

enum SortUsersBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  problems: ProblemRelateToManyInput
}

input ProblemRelateToManyInput {
  create: [ProblemCreateInput]
  connect: [ProblemWhereUniqueInput]
  disconnect: [ProblemWhereUniqueInput]
  disconnectAll: Boolean
}

input UsersUpdateInput {
  id: ID!
  data: UserUpdateInput
}

input UserCreateInput {
  name: String
  email: String
  password: String
  problems: ProblemRelateToManyInput
}

input UsersCreateInput {
  data: UserCreateInput
}

"""
 A keystone list
"""
type Problem {
  id: ID!
  title: String
  status: String
  body: Problem_body_DocumentField
  publishDate: String
  publishedAs: String
  author: User
  problemTags(
    where: ProblemTagWhereInput! = {}
    search: String
    sortBy: [SortProblemTagsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ProblemTagOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [ProblemTag!]
  _problemTagsMeta(
    where: ProblemTagWhereInput! = {}
    search: String
    sortBy: [SortProblemTagsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ProblemTagOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use problemTagsCount instead."
    )
  problemTagsCount(where: ProblemTagWhereInput! = {}): Int
}

type Problem_body_DocumentField {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ProblemWhereInput {
  AND: [ProblemWhereInput!]
  OR: [ProblemWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  title: String
  title_not: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  title_i: String
  title_not_i: String
  title_contains_i: String
  title_not_contains_i: String
  title_starts_with_i: String
  title_not_starts_with_i: String
  title_ends_with_i: String
  title_not_ends_with_i: String
  title_in: [String]
  title_not_in: [String]
  status: String
  status_not: String
  status_in: [String]
  status_not_in: [String]
  publishDate: String
  publishDate_not: String
  publishDate_lt: String
  publishDate_lte: String
  publishDate_gt: String
  publishDate_gte: String
  publishDate_in: [String]
  publishDate_not_in: [String]
  publishedAs: String
  publishedAs_not: String
  publishedAs_in: [String]
  publishedAs_not_in: [String]
  author: UserWhereInput
  author_is_null: Boolean

  """
   condition must be true for all nodes
  """
  problemTags_every: ProblemTagWhereInput

  """
   condition must be true for at least 1 node
  """
  problemTags_some: ProblemTagWhereInput

  """
   condition must be false for all nodes
  """
  problemTags_none: ProblemTagWhereInput
}

input ProblemWhereUniqueInput {
  id: ID
}

enum SortProblemsBy {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  status_ASC
  status_DESC
  publishDate_ASC
  publishDate_DESC
  publishedAs_ASC
  publishedAs_DESC
}

input ProblemOrderByInput {
  id: OrderDirection
  title: OrderDirection
  status: OrderDirection
  publishDate: OrderDirection
  publishedAs: OrderDirection
}

input ProblemUpdateInput {
  title: String
  status: String
  body: JSON
  publishDate: String
  publishedAs: String
  author: UserRelateToOneInput
  problemTags: ProblemTagRelateToManyInput
}

input UserRelateToOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  disconnectAll: Boolean
}

input ProblemTagRelateToManyInput {
  create: [ProblemTagCreateInput]
  connect: [ProblemTagWhereUniqueInput]
  disconnect: [ProblemTagWhereUniqueInput]
  disconnectAll: Boolean
}

input ProblemsUpdateInput {
  id: ID!
  data: ProblemUpdateInput
}

input ProblemCreateInput {
  title: String
  status: String
  body: JSON
  publishDate: String
  publishedAs: String
  author: UserRelateToOneInput
  problemTags: ProblemTagRelateToManyInput
}

input ProblemsCreateInput {
  data: ProblemCreateInput
}

"""
 A keystone list
"""
type ProblemTag {
  id: ID!
  name: String
  problems(
    where: ProblemWhereInput! = {}
    search: String
    sortBy: [SortProblemsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ProblemOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Problem!]
  _problemsMeta(
    where: ProblemWhereInput! = {}
    search: String
    sortBy: [SortProblemsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ProblemOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use problemsCount instead."
    )
  problemsCount(where: ProblemWhereInput! = {}): Int
}

input ProblemTagWhereInput {
  AND: [ProblemTagWhereInput!]
  OR: [ProblemTagWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]

  """
   condition must be true for all nodes
  """
  problems_every: ProblemWhereInput

  """
   condition must be true for at least 1 node
  """
  problems_some: ProblemWhereInput

  """
   condition must be false for all nodes
  """
  problems_none: ProblemWhereInput
}

input ProblemTagWhereUniqueInput {
  id: ID
}

enum SortProblemTagsBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

input ProblemTagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input ProblemTagUpdateInput {
  name: String
  problems: ProblemRelateToManyInput
}

input ProblemTagsUpdateInput {
  id: ID!
  data: ProblemTagUpdateInput
}

input ProblemTagCreateInput {
  name: String
  problems: ProblemRelateToManyInput
}

input ProblemTagsCreateInput {
  data: ProblemTagCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  """
   Create a single User item.
  """
  createUser(data: UserCreateInput): User

  """
   Create multiple User items.
  """
  createUsers(data: [UsersCreateInput]): [User]

  """
   Update a single User item by ID.
  """
  updateUser(id: ID!, data: UserUpdateInput): User

  """
   Update multiple User items by ID.
  """
  updateUsers(data: [UsersUpdateInput]): [User]

  """
   Delete a single User item by ID.
  """
  deleteUser(id: ID!): User

  """
   Delete multiple User items by ID.
  """
  deleteUsers(ids: [ID!]): [User]

  """
   Create a single Problem item.
  """
  createProblem(data: ProblemCreateInput): Problem

  """
   Create multiple Problem items.
  """
  createProblems(data: [ProblemsCreateInput]): [Problem]

  """
   Update a single Problem item by ID.
  """
  updateProblem(id: ID!, data: ProblemUpdateInput): Problem

  """
   Update multiple Problem items by ID.
  """
  updateProblems(data: [ProblemsUpdateInput]): [Problem]

  """
   Delete a single Problem item by ID.
  """
  deleteProblem(id: ID!): Problem

  """
   Delete multiple Problem items by ID.
  """
  deleteProblems(ids: [ID!]): [Problem]

  """
   Create a single ProblemTag item.
  """
  createProblemTag(data: ProblemTagCreateInput): ProblemTag

  """
   Create multiple ProblemTag items.
  """
  createProblemTags(data: [ProblemTagsCreateInput]): [ProblemTag]

  """
   Update a single ProblemTag item by ID.
  """
  updateProblemTag(id: ID!, data: ProblemTagUpdateInput): ProblemTag

  """
   Update multiple ProblemTag items by ID.
  """
  updateProblemTags(data: [ProblemTagsUpdateInput]): [ProblemTag]

  """
   Delete a single ProblemTag item by ID.
  """
  deleteProblemTag(id: ID!): ProblemTag

  """
   Delete multiple ProblemTag items by ID.
  """
  deleteProblemTags(ids: [ID!]): [ProblemTag]
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult!
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  endSession: Boolean!
}

union AuthenticatedItem = User

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  code: PasswordAuthErrorCode!
  message: String!
}

enum PasswordAuthErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  SECRET_NOT_SET
  MULTIPLE_IDENTITY_MATCHES
  SECRET_MISMATCH
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  """
   Search for all User items which match the where clause.
  """
  allUsers(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [User!]

  """
   Search for the User item with the matching ID.
  """
  User(where: UserWhereUniqueInput!): User

  """
   Perform a meta-query on all User items which match the where clause.
  """
  _allUsersMeta(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use usersCount instead."
    )
  usersCount(where: UserWhereInput! = {}): Int

  """
   Search for all Problem items which match the where clause.
  """
  allProblems(
    where: ProblemWhereInput! = {}
    search: String
    sortBy: [SortProblemsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ProblemOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Problem!]

  """
   Search for the Problem item with the matching ID.
  """
  Problem(where: ProblemWhereUniqueInput!): Problem

  """
   Perform a meta-query on all Problem items which match the where clause.
  """
  _allProblemsMeta(
    where: ProblemWhereInput! = {}
    search: String
    sortBy: [SortProblemsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ProblemOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use problemsCount instead."
    )
  problemsCount(where: ProblemWhereInput! = {}): Int

  """
   Search for all ProblemTag items which match the where clause.
  """
  allProblemTags(
    where: ProblemTagWhereInput! = {}
    search: String
    sortBy: [SortProblemTagsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ProblemTagOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [ProblemTag!]

  """
   Search for the ProblemTag item with the matching ID.
  """
  ProblemTag(where: ProblemTagWhereUniqueInput!): ProblemTag

  """
   Perform a meta-query on all ProblemTag items which match the where clause.
  """
  _allProblemTagsMeta(
    where: ProblemTagWhereInput! = {}
    search: String
    sortBy: [SortProblemTagsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ProblemTagOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use problemTagsCount instead."
    )
  problemTagsCount(where: ProblemTagWhereInput! = {}): Int
  authenticatedItem: AuthenticatedItem
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID!): KeystoneAdminUIFieldMetaItemView
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode!
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
